// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	mypostprocess.usf: assn7 usf file
=============================================================================*/


// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

#include "Common.ush"
#include "PostProcessCommon.ush"
#include "FastMath.ush"

//#define THREADGROUP_SIZEX		16
//#define THREADGROUP_SIZEY		16
//#define THREADGROUP_TOTALSIZE	(THREADGROUP_SIZEX * THREADGROUP_SIZEY)

//groupshared float4 Shared[ THREADGROUP_TOTALSIZE ];

//RWTexture2D<float4>	OutVelocityFlat;
//RWTexture2D<float4>	OutMaxTileVelocity;

//float4 MotionBlurParameters;

//float4 MinMaxLength( float4 v0, float4 v1 )
//{
//	float2 Min = dot( v0.xy, v0.xy ) < dot( v1.xy, v1.xy ) ? v0.xy : v1.xy;
//	float2 Max = dot( v0.zw, v0.zw ) > dot( v1.zw, v1.zw ) ? v0.zw : v1.zw;
//	return float4( Min, Max );
//}

//float4 MinMaxLengthPolar( float4 v0, float4 v1 )
//{
//	float2 Min = v0.x < v1.x ? v0.xy : v1.xy;
//	float2 Max = v0.z > v1.z ? v0.zw : v1.zw;
//	return float4( Min, Max );
//}

//float2 CartesianToPolar( float2 Velocity )
//{
//	float Length = length( Velocity );
//	float Angle = atan2Fast( Velocity.y, Velocity.x );
//	return float2( Length, Angle );
//}

//float2 PolarToCartesian( float2 Velocity )
//{
//	float Length = Velocity.x;
//	float Angle = Velocity.y;
//	sincos( Angle, Velocity.y, Velocity.x );
//	return Velocity * Length;
//}

//[numthreads(THREADGROUP_SIZEX, THREADGROUP_SIZEY, 1)]
void MyProcessMain(
	//uint3 GroupId : SV_GroupID,
	//uint3 DispatchThreadId : SV_DispatchThreadID,
	//uint3 GroupThreadId : SV_GroupThreadID,
	//uint GroupIndex : SV_GroupIndex ) 
{
	//uint2 PixelPos = min(DispatchThreadId.xy + ViewportRect.xy, ViewportRect.zw - 1);

	//float2 Velocity = PostprocessInput0[ PixelPos ].xy;
	
	float Depth = PostprocessInput1[ PixelPos ].x;

	//if( Velocity.x > 0.0 )
	//{
	//	Velocity = DecodeVelocityFromTexture( Velocity );
	//}
	//else
	//{
	//	float2 ViewportUV = ( (float2)DispatchThreadId.xy + 0.5 ) / ( ViewportRect.zw - ViewportRect.xy );
	//	float2 ScreenPos = 2 * float2(ViewportUV.x, 1 - ViewportUV.y) - 1;
	//	float4 ThisClip = float4( ScreenPos, Depth, 1 );
	//	float4 PrevClip = mul( ThisClip, View.ClipToPrevClip );
	//	float2 PrevScreen = PrevClip.xy / PrevClip.w;
	//	Velocity = ScreenPos - PrevScreen;
	//}

	//const float AspectRatio = MotionBlurParameters.x;
	//Velocity.y *= -AspectRatio;

	//float2 VelocityPolar = CartesianToPolar(Velocity);
	
	// If the velocity vector was zero length, VelocityPolar will contain NaNs.
	//if (any(isnan(VelocityPolar)))
	//{
	//	VelocityPolar = float2(0.0f, 0.0f);
	//}
	
	//bool bInsideViewport = all( PixelPos.xy < ViewportRect.zw );
	
//#if 1
	// 11:11:10  (VelocityLength, VelocityAngle, Depth)
	//float2 EncodedVelocity;
	//EncodedVelocity.x = VelocityPolar.x;
	//EncodedVelocity.y = VelocityPolar.y * (0.5 / PI) + 0.5;
//#else
	// 11:11:10 (Velocity.xy, Depth)
	// Only handles values in range (-2,2)
	//Velocity = clamp( Velocity, -1.9999, 1.9999 );
	// Kill denormals
	//Velocity = abs( Velocity ) < exp2(-14.0) ? 0 : Velocity;
	// Store sign in top bit of 6e5 exponent
	//float2 EncodedVelocity = Velocity * ( Velocity < 0 ? -32768.0 : 1 );
//#endif
	
	//BRANCH
	//if( bInsideViewport )
	//{
	//	OutVelocityFlat[ PixelPos ] = float3( EncodedVelocity, ConvertFromDeviceZ( Depth ) ).xyzz;
	//}

//#if 1
	// Limit velocity
	//VelocityPolar.x = min( VelocityPolar.x, MotionBlurParameters.w / MotionBlurParameters.y );
//#endif

	//float4 VelocityMinMax = VelocityPolar.xyxy;
	//VelocityMinMax.x = bInsideViewport ? VelocityMinMax.x : 2;
	//VelocityMinMax.z = bInsideViewport ? VelocityMinMax.z : 0;

	//Shared[ GroupIndex ] = VelocityMinMax;

	//GroupMemoryBarrierWithGroupSync();

//#if THREADGROUP_TOTALSIZE > 512
	//if( GroupIndex < 512 )	Shared[ GroupIndex ] = MinMaxLengthPolar( Shared[ GroupIndex ], Shared[ GroupIndex + 512 ] );
	//GroupMemoryBarrierWithGroupSync();
//#endif
//#if THREADGROUP_TOTALSIZE > 256
	//if( GroupIndex < 256 )	Shared[ GroupIndex ] = MinMaxLengthPolar( Shared[ GroupIndex ], Shared[ GroupIndex + 256 ] );
	//GroupMemoryBarrierWithGroupSync();
//#endif
//#if THREADGROUP_TOTALSIZE > 128
	//if( GroupIndex < 128 )	Shared[ GroupIndex ] = MinMaxLengthPolar( Shared[ GroupIndex ], Shared[ GroupIndex + 128 ] );
	//GroupMemoryBarrierWithGroupSync();
//#endif
//#if THREADGROUP_TOTALSIZE > 64
	//if( GroupIndex <  64 )	Shared[ GroupIndex ] = MinMaxLengthPolar( Shared[ GroupIndex ], Shared[ GroupIndex +  64 ] );
	//GroupMemoryBarrierWithGroupSync();
//#endif

	// Safe for vector sizes 32 or larger, AMD and NV
	// TODO Intel variable size vector
	//if( GroupIndex < 32 )	Shared[ GroupIndex ] = MinMaxLengthPolar( Shared[ GroupIndex ], Shared[ GroupIndex + 32 ] );
	//if( GroupIndex < 16 )	Shared[ GroupIndex ] = MinMaxLengthPolar( Shared[ GroupIndex ], Shared[ GroupIndex + 16 ] );
	//if( GroupIndex <  8 )	Shared[ GroupIndex ] = MinMaxLengthPolar( Shared[ GroupIndex ], Shared[ GroupIndex +  8 ] );
	//if( GroupIndex <  4 )	Shared[ GroupIndex ] = MinMaxLengthPolar( Shared[ GroupIndex ], Shared[ GroupIndex +  4 ] );
	//if( GroupIndex <  2 )	Shared[ GroupIndex ] = MinMaxLengthPolar( Shared[ GroupIndex ], Shared[ GroupIndex +  2 ] );
	//if( GroupIndex <  1 )	Shared[ GroupIndex ] = MinMaxLengthPolar( Shared[ GroupIndex ], Shared[ GroupIndex +  1 ] );

	//if( GroupIndex == 0 )
	//{
	//	OutMaxTileVelocity[ GroupId.xy ] = float4( PolarToCartesian( Shared[0].xy ), PolarToCartesian( Shared[0].zw ) );
	//}
}

//#include "Common.ush"
//#include "PostProcessCommon.ush"
//#include "EyeAdaptationCommon.ush"

// for VisualizeBloomOverlayPS
// xyz:Bloom1Tint.rgb, w:unused
//float4 ColorScale1;

// vertex shader entry point
//void MainPostprocessCommonVS(
//	in float4 InPosition : ATTRIBUTE0,
//	in float2 InTexCoord : ATTRIBUTE1,
//	out noperspective float4 OutTexCoord : TEXCOORD0,
//	out float4 OutPosition : SV_POSITION
//	)
//{
//	DrawRectangle(InPosition, InTexCoord, OutPosition, OutTexCoord.xy);
//	OutTexCoord.zw = OutPosition.xy;
//}

//void VisualizeBloomSetupPS(
//	noperspective float4 UVAndScreenPos : TEXCOORD0,
//	float4 SvPosition : SV_POSITION, 
//	out float4 OutColor : SV_Target0)
//{
//	float2 UV = UVAndScreenPos.xy;
//
//	OutColor = 0;

//	int2 PixelPos = (int2)SvPosition.xy;

//	int2 ViewportCenter = (int2)(ViewportRect.xy + ViewportSize.xy / 2);

	// cross in x and y
//	bool bMask = ViewportCenter.x == PixelPos.x || ViewportCenter.y == PixelPos.y;
	// vertical line at viewport center
//	bool bMask = ViewportCenter.x == PixelPos.x;

//	if(bMask)
//	{
		// green is the test impulse
//		OutColor.g = 20;
//	}
	
//	float3 HDRColor = Texture2DSample(PostprocessInput0, PostprocessInput0Sampler, UV).rgb;

	// reference is in red
//	OutColor.r = dot(HDRColor, 1/3.0f);
	// blue is unused
//	OutColor.b = 0;
//}

//void VisualizeBloomOverlayPS(
//	noperspective float4 UVAndScreenPos : TEXCOORD0,
//	float4 SvPosition : SV_POSITION,
//	out float4 OutColor : SV_Target0)
//{
//	float2 UV = UVAndScreenPos.xy;
//	int2 PixelPos = (int2)SvPosition.xy;

//	int2 ViewportCenter = (int2)(ViewportRect + ViewportSize / 2);

	// debug: zoomin
//	if(0)
//	{
//		PixelPos.x = (PixelPos.x - ViewportCenter.x) / 10 + ViewportCenter.x;
//		UV.x = PixelPos.x * PostprocessInput0Size.z;
//	}

//	float2 ViewPortUV = PixelPos * ViewportSize.zw;

//	float2 UVCenter = float2(UV.x, (int)(ViewportRect.y + ViewportSize.y / 2) * PostprocessInput0Size.w);

	// bottom is reference, top is cretated through the bloom system
//	bool bBottom = PixelPos.y > ViewportCenter.y;

//	float HDRValueTest;
//	{
//		float3 NonBloomColorTop = Texture2DSampleLevel(PostprocessInput1, PostprocessInput1Sampler, UVCenter, 0).rgb;
//		float4 CombinedBloom = Texture2DSample(PostprocessInput2, PostprocessInput2Sampler, UVCenter);
//		float3 BloomDirtMaskColor = 0;

		// only take green, in red is the reference
//		HDRValueTest = (NonBloomColorTop + CombinedBloom.rgb * (ColorScale1.rgb + BloomDirtMaskColor)).g;
//	}

//	float HDRValueReference = Texture2DSampleLevel(PostprocessInput1, PostprocessInput1Sampler, UVCenter, 0).r;

//	float CompareY = lerp(1.1f, -0.1f, ViewPortUV.y);

//	bool bOutside = CompareY <= 0 || CompareY >= 1;

	// non linear distribution for easier tweaking?
//	float ValueCompare = exp(-20 * (1-CompareY) + 3.5);

//	bool bReferenceMask = HDRValueReference > ValueCompare;
//	bool bTestMask = HDRValueTest > ValueCompare;
//	bool bCenter = ViewportCenter.x == PixelPos.x;

	// faint grey in the background to see where the diagram ends
//	OutColor = 0.05f;

//	FLATTEN if(bReferenceMask || bTestMask)
//	{
//		OutColor = 0;
//	}

//	FLATTEN if(bReferenceMask)
//	{
//		OutColor.g = 1;
//	}

//	FLATTEN if(bTestMask)
//	{
//		OutColor.r = 1;
//	}

//	FLATTEN if(bOutside)
//	{
//		OutColor.rgb = bCenter ? float3(1, 0, 0) : float3(0,0,0);
//	}

//}

// vertex shader entry point
//void MainVS(
//	float4 InPosition : ATTRIBUTE0,
//	float2 InTexCoord : ATTRIBUTE1,
//	out noperspective float4 OutTexCoord : TEXCOORD0,
//	out nointerpolation float OutExposureScale : TEXCOORD1,
//	out float4 OutPosition : SV_POSITION
//	)
//{
//	MainPostprocessCommonVS(InPosition, InTexCoord, OutTexCoord, OutPosition);

//#if FEATURE_LEVEL >= FEATURE_LEVEL_SM5
//	// texture can be GWhiteTexture which is 1x1. It's important we don't read outside bounds.
//	OutExposureScale = EyeAdaptation.Load(int3(0, 0, 0)).r;
//#else
//	OutExposureScale = 1;
//#endif
//}

// -----------------------------
//float4 BloomSetupCommon(float2 UV, float Threshold, float ExposureScale)
//{
//#if USE_PREEXPOSURE
//	const float OneOverPreExposure = View.OneOverPreExposure;
//	const float PreExposure = View.PreExposure;
//#else
//	const float OneOverPreExposure = 1.f;
//	const float PreExposure = View.PreExposure;
//#endif

//	half4 SceneColor = Texture2DSample(PostprocessInput0, PostprocessInput0Sampler, UV) * OneOverPreExposure; 

	// clamp to avoid artifacts from exceeding fp16 through framebuffer blending of multiple very bright lights
//	SceneColor.rgb = min(float3(256 * 256, 256 * 256, 256 * 256), SceneColor.rgb);
	
//	half3 LinearColor = SceneColor.rgb;

	// todo: make this adjustable (e.g. LUT)
//	half TotalLuminance = Luminance( LinearColor ) * ExposureScale;
//	half BloomLuminance = TotalLuminance - Threshold;
	// mask 0..1
//	half BloomAmount = saturate(BloomLuminance / 2.0f);

//	return float4(BloomAmount * LinearColor, 0);
//}

// x:BloomThreshold, yz:unused, w:ExposureScale (useful if eyeadaptation is locked)
//float4 BloomThreshold;

// bloom threshold
//void MainPS(
//	noperspective float4 UVAndScreenPos : TEXCOORD0,
//	nointerpolation float InExposureScale : TEXCOORD1,
//	out float4 OutColor : SV_Target0)
//{
//	float2 UV = UVAndScreenPos.xy;

//#if NO_EYEADAPTATION_EXPOSURE_FIX 
//	float ExposureScale = BloomThreshold.w;
//#else
//	float ExposureScale = InExposureScale;
//#endif

//	OutColor = BloomSetupCommon(UV, BloomThreshold.x, ExposureScale);
//}

//#if COMPUTESHADER
// x: BloomThreshold, y: Unused, zw: ThreadToUVScale
//float4 BloomSetupComputeParams;
//RWTexture2D<float4> OutComputeTex;

//[numthreads(THREADGROUP_SIZEX, THREADGROUP_SIZEY, 1)]
//void MainCS(uint2 DispatchThreadId : SV_DispatchThreadID)
//{
//	float2 UV = ((float2)DispatchThreadId + View.ViewRectMin.xy + 0.5f) * BloomSetupComputeParams.zw;

//	if (IsComputeUVOutOfBounds(UV))
//	{
//		return;
//	}

//	float ExposureScale = EyeAdaptationLookup();
//	float4 OutColor = BloomSetupCommon(UV, BloomSetupComputeParams.x, ExposureScale);

//	uint2 PixelPos = DispatchThreadId + (uint2)View.ViewRectMin.xy;
//	OutComputeTex[PixelPos] = OutColor;
//}
//#endif 